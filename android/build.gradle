import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
String localMavenPath = project.mkdir("build").absolutePath

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
//        maven {
//            url "${project(':aar').projectDir}/build"
//        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

allprojects {
    repositories {
        google()
        mavenCentral()

    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//String aarPath = "${buildDir}/aar" // Update the path as per your requirements

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
String aarPath = "/app/build/local/maven/repository"
task useAar {
    doLast {
        File file = project.file("libs")
        if (file.exists() && file.isDirectory()) {
            file.listFiles(new FileFilter() {
                @Override
                boolean accept(File pathname) {
                    return pathname.name.endsWith(".aar")
                }
            }).each { item ->
                String aarName = item.name.substring(0, item.name.length() - 4)
                String[] aarInfo = aarName.split("-")
                String sha1 = getFileSha1(item)
                String md5 = getFileMD5(item)
                String fromStr = item.path
                String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
                String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"
                println("localMavenPath: " + localMavenPath)
                println("aar: " + aarInfo + " file sha1:" + sha1 + " md5:" + md5)
                println("aarPath: " + aarPath)
                println("intoStr: " + intoStr)
                println("newName: " + newName)
                println("fromStr: " + fromStr)
                println("intoStr: " + intoStr)

                project.copy {
                    from fromStr
                    into intoStr
                    rename(item.name, newName)
                }

                writeToFile(project, intoStr + "/" + newName + ".md5", md5)
                writeToFile(project, intoStr + "/" + newName + ".sha1", sha1)

                String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
                writeToFile(project, pomPath, createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
                writeToFile(project, pomPath + ".md5", getFileMD5(project.file(pomPath)))
                writeToFile(project, pomPath + ".sha1", getFileSha1(project.file(pomPath)))

                String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
                writeToFile(project, metadataPath, createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
                writeToFile(project, metadataPath + ".md5", getFileMD5(project.file(metadataPath)))
                writeToFile(project, metadataPath + ".sha1", getFileSha1(project.file(metadataPath)))

                dependencies {
                    implementation "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
                }
            }
        }
    }
}

public static void writeToFile(Project project, String filePath, String content) {
    project.file(filePath).write(content)
}

public static String createMetadataStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<metadata>\n" +
            "  <groupId>" + groupId + "</groupId>\n" +
            "  <artifactId>" + artifactId + "</artifactId>\n" +
            "  <versioning>\n" +
            "    <release>" + version + "</release>\n" +
            "    <versions>\n" +
            "      <version>" + version + "</version>\n" +
            "    </versions>\n" +
            "    <lastUpdated>" + new Date().format('yyyyMMdd') + "000000</lastUpdated>\n" +
            "  </versioning>\n" +
            "</metadata>\n"
}

public static String createPomStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
            "  <modelVersion>4.0.0</modelVersion>\n" +
            "  <groupId>" + groupId + "</groupId>\n" +
            "  <artifactId>" + artifactId + "</artifactId>\n" +
            "  <version>" + version + "</version>\n" +
            "  <packaging>aar</packaging>\n" +
            "</project>\n"
}

public static String getFileSha1(File file) {
    try (FileInputStream input = new FileInputStream(file)) {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String sha1 = new BigInteger(1, digest.digest()).toString(16);
        int length = 40 - sha1.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                sha1 = "0" + sha1;
            }
        }
        return sha1;
    } catch (IOException | NoSuchAlgorithmException e) {
        e.printStackTrace();
        return null;
    }
}

public static String getFileMD5(File file) {
    try (FileInputStream input = new FileInputStream(file)) {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String md5 = new BigInteger(1, digest.digest()).toString(16);
        int length = 32 - md5.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                md5 = "0" + md5;
            }
        }
        return md5;
    } catch (IOException | NoSuchAlgorithmException e) {
        e.printStackTrace();
        return null;
    }
}
